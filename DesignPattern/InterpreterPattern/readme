解释器模式
1、每一种程序语言都有一套自己的规则，并配备了相应的编译器，编译器将程序语言翻译成机器码的过程是一次转换的过程
这一过程可视为一次解释的过程。所谓解释器模式即：按照规定的规则对数据对程序进行转换的过程的抽象。

2、这一抽象的过程中主要涉及到3个对象：规则（ 非终结符表达式，一般需要和普通对象作用所以叫做非终结）
+普通对象（终结符表达式，单独适用具有一定的意义，不必要和其他对象关联才有意义，所以叫做终结符）
=有一定意义的普通对象（环境角色：非终结符与终结符的结合体）

3、解释器是一个简单语法分析工具，它最显著的优点就是扩展性，修改语法规则只要修改相应的非终结符表达式就可以了，
若扩展语法，则只要增加非终结符类就可以了。

4、解释器模式使用的场景：重复发生的问题可以使用解释器模式：日志文件分析处理、SQL语法分析、数据分析工具、
报表设计工具、科学计算工具、分词算法、格式化算法等等

5、若你确实遇到“一种特定类型的问题发生的频率足够高”的情况，准备使用解释器模式时，
可以考虑一下Expression4J、MESP（Math Expression String Parser）、Jep等开源的解析工具包
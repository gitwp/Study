<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:aop="http://www.springframework.org/schema/aop"  
    xsi:schemaLocation="  
            http://www.springframework.org/schema/beans  
            http://www.springframework.org/schema/beans/spring-beans-2.0.xsd  
            http://www.springframework.org/schema/aop  
            http://www.springframework.org/schema/aop/spring-aop-2.5.xsd"  
        default-autowire="autodetect">  
    <aop:config>  
		<!-- 切面（Aspect） ：官方的抽象定义为“一个关注点的模块化，这个关注点可能会横切多个对象” -->
        <aop:aspect id="TestAspect" ref="aspectBean">  
        
            <!--切入点（Pointcut）:配置com.study.spring.aop.service包下所有类或接口的所有方法-->  
            <aop:pointcut id="businessService"  
                expression="execution(* com.wangp.ex1.springaop.service.impl.*.*(..))" />  
                
			<!--通知执行顺序： -->
			<!--①：aop:before->具体业务逻辑->aop:after->aop:after-returning->aop:around-->
			<!--②：aop:before->具体业务逻辑->aop:after->aop:after-throwing-->
			
			<!--前置通知（Before advice） ：在某连接点（JoinPoint）之前执行的通知，但这个通知不能阻止连接点前的执行 -->
            <aop:before pointcut-ref="businessService" method="doBefore"/>  
			<!--后通知（After advice） ：当某连接点退出的时候执行的通知（不论是正常返回还是异常退出） -->
            <aop:after pointcut-ref="businessService" method="doAfter"/>  
            <!--返回后通知（After return advice） ：在某连接点正常完成后执行的通知，不包括抛出异常的情况 -->
            <aop:after-returning  pointcut-ref="businessService" method="doAfterReturning"/>
			<!--环绕通知（Around advice） ：包围一个连接点的通知，可以在方法的调用前后(正常结束)完成自定义的行为，也可以选择不执行 -->
            <aop:around pointcut-ref="businessService" method="doAround"/> 
			<!--抛出异常后通知（After throwing advice） ： 在方法抛出异常退出时执行的通知  -->
            <aop:after-throwing pointcut-ref="businessService" method="doThrowing" throwing="ex"/>  
            
        </aop:aspect>  
    </aop:config>  
      
    <bean id="aspectBean" class="com.wangp.ex1.springaop.TestAspect" />  
    <bean id="aService" class="com.wangp.ex1.springaop.service.impl.AServiceImpl"></bean>  
    <bean id="bService" class="com.wangp.ex1.springaop.service.impl.BServiceImpl"></bean>  
</beans>  